{"version":3,"sources":["Firebase.js","components/Login.js","components/RoomList.js","components/AddRoom.js","components/Upload.js","components/ChatRoom.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","db","database","Login","history","useHistory","useState","nickname","creds","setCreds","showLoading","setShowLoading","ref","Spinner","color","Jumbotron","Form","onSubmit","e","preventDefault","orderByChild","equalTo","once","snapshot","exists","localStorage","setItem","push","set","FormGroup","Label","Input","type","name","id","placeholder","value","onChange","persist","target","Button","variant","RoomList","room","setRoom","setNickname","useEffect","a","getItem","on","resp","snapshotToArray","fetchData","returnArr","forEach","childSnapshot","item","val","key","onClick","removeItem","to","ListGroup","map","idx","ListGroupItem","action","roomname","chat","message","date","user","find","x","undefined","update","status","newroomuser","enterChatRoom","AddRoom","Alert","goBack","Upload","props","className","accept","setImage","files","ChatRoom","chats","setChats","users","setUsers","image","setRoomname","imageURL","newchat","setNewchat","useParams","resp2","roomusers","filter","uploadImage","JSON","parse","stringify","Moment","Date","format","Container","Row","Col","xs","Card","CardBody","CardSubtitle","exitChat","src","alt","timeStampInMs","window","performance","now","timing","navigationStart","put","then","getDownloadURL","InputGroup","file","InputGroupAddon","addonType","App","location","useLocation","pathname","state","from","path","SecureRoute","children","rest","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ef3387dd.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport 'firebase/storage';\r\nconst config = {\r\n  apiKey: \"AIzaSyCpjSisGMYrvBXOLKQ4ULaeNmK5zU_8K-w\",\r\n  authDomain: \"shashichatapp.firebaseapp.com\",\r\n  databaseURL: \"https://shashichatapp-default-rtdb.firebaseio.com\",\r\n  projectId: \"shashichatapp\",\r\n  storageBucket: \"shashichatapp.appspot.com\",\r\n  messagingSenderId: \"837915550458\",\r\n  appId: \"1:837915550458:web:df32edf2030c97e2159f43\"\r\n  };\r\nfirebase.initializeApp(config);\r\nconst storage = firebase.storage();\r\nconst db = firebase.database();\r\n\r\n\r\nexport { storage,db, firebase as default};","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    Jumbotron,\r\n    Spinner,\r\n    Form,\r\n    Button,\r\n    FormGroup, \r\n    Label, \r\n    Input\r\n} from 'reactstrap';\r\n\r\nimport {storage, db} from '../Firebase';\r\n\r\nfunction Login() {\r\n    const history = useHistory();\r\n    const [creds, setCreds] = useState({ nickname: '' });\r\n    const [showLoading, setShowLoading] = useState(false);\r\n    const ref = db.ref('users/');\r\n\r\n    const login = (e) => {\r\n        e.preventDefault();\r\n        setShowLoading(true);\r\n        ref.orderByChild('nickname').equalTo(creds.nickname).once('value', snapshot => {\r\n            if (snapshot.exists()) {\r\n                localStorage.setItem('nickname', creds.nickname);\r\n                history.push('/roomlist');\r\n                setShowLoading(false);\r\n            } else {\r\n                const newUser = db.ref('users/').push();\r\n                newUser.set(creds);\r\n                localStorage.setItem('nickname', creds.nickname);\r\n                history.push('/roomlist');\r\n                setShowLoading(false);\r\n            }\r\n        });\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        e.persist();\r\n        setCreds({...creds, [e.target.name]: e.target.value});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {showLoading &&\r\n                <Spinner color=\"primary\" />\r\n            }\r\n            <Jumbotron>\r\n                <Form onSubmit={login}>\r\n                    <FormGroup>\r\n                        <Label>Nickname</Label>\r\n                        <Input type=\"text\" name=\"nickname\" id=\"nickname\" placeholder=\"Enter Your Nickname\" value={creds.nickname} onChange={onChange} />\r\n                    </FormGroup>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Login\r\n                    </Button>\r\n                </Form>\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory  } from \"react-router-dom\";\r\nimport {  Jumbotron, Spinner, ListGroup, ListGroupItem, Button } from 'reactstrap';\r\nimport Moment from 'moment';\r\nimport {storage, db} from '../Firebase';\r\n\r\nfunction RoomList() {\r\n    const [room, setRoom] = useState([]);\r\n    const [showLoading, setShowLoading] = useState(true);\r\n    const [nickname, setNickname] = useState('');\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setNickname(localStorage.getItem('nickname'));\r\n            db.ref('rooms/').on('value', resp => {\r\n                setRoom([]);\r\n                setRoom(snapshotToArray(resp));\r\n                setShowLoading(false);\r\n            });\r\n        };\r\n      \r\n        fetchData();\r\n    }, []);\r\n\r\n    const snapshotToArray = (snapshot) => {\r\n        const returnArr = [];\r\n\r\n        snapshot.forEach((childSnapshot) => {\r\n            const item = childSnapshot.val();\r\n            item.key = childSnapshot.key;\r\n            returnArr.push(item);\r\n        });\r\n\r\n        return returnArr;\r\n    }\r\n\r\n    const enterChatRoom = (roomname) => {\r\n        const chat = { roomname: '', nickname: '', message: '', date: '', type: '' };\r\n        chat.roomname = roomname;\r\n        chat.nickname = nickname;\r\n       // chat.date = Moment(new Date()).format('DD/MM/YYYY HH:mm:ss');\r\n       // chat.message = `${nickname} enter the room`;\r\n        chat.type = 'join';\r\n        const newMessage = db.ref('chats/').push();\r\n        newMessage.set(chat);\r\n\r\n        db.ref('roomusers/').orderByChild('roomname').equalTo(roomname).on('value', (resp) => {\r\n            let roomuser = [];\r\n            roomuser = snapshotToArray(resp);\r\n            const user = roomuser.find(x => x.nickname === nickname);\r\n            if (user !== undefined) {\r\n              const userRef = db.ref('roomusers/' + user.key);\r\n              userRef.update({status: 'online'});\r\n            } else {\r\n              const newroomuser = { roomname: '', nickname: '', status: '' };\r\n              newroomuser.roomname = roomname;\r\n              newroomuser.nickname = nickname;\r\n              newroomuser.status = 'online';\r\n              const newRoomUser = db.ref('roomusers/').push();\r\n              newRoomUser.set(newroomuser);\r\n            }\r\n        });\r\n    \r\n        history.push('/chatroom/' + roomname);\r\n    }\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('nickname');\r\n        history.push('/login');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {showLoading &&\r\n                <Spinner color=\"primary\" />\r\n            }\r\n            <Jumbotron>\r\n                <h3>{nickname} <Button onClick={() => { logout() }}>Logout</Button></h3>\r\n                <h2>Room List</h2>\r\n                <div>\r\n                    <Link to=\"/addroom\">Add Room</Link>\r\n                </div>\r\n                <ListGroup>\r\n                    {room.map((item, idx) => (\r\n                        <ListGroupItem key={idx} action onClick={() => { enterChatRoom(item.roomname) }}>{item.roomname}</ListGroupItem>\r\n                    ))}\r\n                </ListGroup>\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RoomList;","import React, { useState } from 'react';\r\nimport {\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport {\r\n    Alert,\r\n    Jumbotron,\r\n    Spinner,\r\n    Form,\r\n    Button,\r\n    FormGroup, \r\n    Label, \r\n    Input\r\n} from 'reactstrap';\r\nimport {storage, db} from '../Firebase';\r\n\r\nfunction AddRoom() {\r\n    const history = useHistory();\r\n    const [room, setRoom] = useState({ roomname: '' });\r\n    const [showLoading, setShowLoading] = useState(false);\r\n    const ref = db.ref('rooms/');\r\n\r\n    const save = (e) => {\r\n        e.preventDefault();\r\n        setShowLoading(true);\r\n        ref.orderByChild('roomname').equalTo(room.roomname).once('value', snapshot => {\r\n            if (snapshot.exists()) {\r\n                return (\r\n                    <div>\r\n                        <Alert color=\"primary\">\r\n                            Room name already exist!\r\n                        </Alert>\r\n                    </div>\r\n                );\r\n            } else {\r\n                const newRoom = db.ref('rooms/').push();\r\n                newRoom.set(room);\r\n                history.goBack();\r\n                setShowLoading(false);\r\n            }\r\n        });\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        e.persist();\r\n        setRoom({...room, [e.target.name]: e.target.value});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {showLoading &&\r\n                <Spinner color=\"primary\" />\r\n            }\r\n            <Jumbotron>\r\n                <h2>Please enter new Room</h2>\r\n                <Form onSubmit={save}>\r\n                    <FormGroup>\r\n                        <Label>Room Name</Label>\r\n                        <Input type=\"text\" name=\"roomname\" id=\"roomname\" placeholder=\"Enter Room Name\" value={room.roomname} onChange={onChange} />\r\n                    </FormGroup>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Add\r\n                    </Button>\r\n                </Form>\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddRoom;","import React from 'react';\r\nfunction Upload(props) {\r\n\r\n\r\nreturn (\r\n\t<div className=\"App\">\r\n\t<center>\r\n\t{/* <input type=\"file\" onChange={(e)=>{setImage(e.target.files[0])}}/> */}\r\n\t<input type=\"file\"  accept=\"image/png, image/jpeg\" onChange={(e)=>{props.setImage(e.target.files[0])}}/>\r\n\r\n\t</center>\r\n\t</div>\r\n);\r\n}\r\n\r\nexport default Upload;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    useHistory,\r\n    useParams\r\n  } from \"react-router-dom\";\r\nimport {\r\n    Container, \r\n    Row, \r\n    Col,\r\n    Card,\r\n    CardBody,\r\n    CardSubtitle,\r\n    Button,\r\n    Form,\r\n    InputGroup,\r\n    Input,\r\n    InputGroupAddon\r\n} from 'reactstrap';\r\nimport Moment from 'moment';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\nimport Upload from './Upload';\r\nimport {storage, db} from '../Firebase';\r\n\r\nimport '../Styles.css';\r\n\r\nfunction ChatRoom() {\r\n    const [chats, setChats] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [nickname, setNickname] = useState('');\r\n    const [image , setImage] = useState('');\r\n    const [roomname, setRoomname] = useState('');\r\n    const [newchat, setNewchat] = useState({ roomname: '', nickname: '', message: '', date: '', type: '', imageURL:'' });\r\n    const history = useHistory();\r\n    const { room } = useParams();\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setNickname(localStorage.getItem('nickname'));\r\n            setRoomname(room);\r\n            db.ref('chats/').orderByChild('roomname').equalTo(roomname).on('value', resp => {\r\n              setChats(snapshotToArray(resp));\r\n            });\r\n        };\r\n      \r\n        fetchData();\r\n    }, [room, roomname]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setNickname(localStorage.getItem('nickname'));\r\n            setRoomname(room);\r\n            db.ref('roomusers/').orderByChild('roomname').equalTo(roomname).on('value', (resp2) => {\r\n              setUsers([]);\r\n              const roomusers = snapshotToArray(resp2);\r\n              setUsers(roomusers.filter(x => x.status === 'online'));\r\n            });\r\n        };\r\n      \r\n        fetchData();\r\n    }, [room, roomname]);\r\n\r\n    const snapshotToArray = (snapshot) => {\r\n        const returnArr = [];\r\n\r\n        snapshot.forEach((childSnapshot) => {\r\n            const item = childSnapshot.val();\r\n            item.key = childSnapshot.key;\r\n            returnArr.push(item);\r\n        });\r\n\r\n        return returnArr;\r\n    }\r\n\r\n    const submitMessage = (e) => {\r\n        e.preventDefault();\r\n        const chat = newchat;\r\n        chat.roomname = roomname;\r\n        chat.nickname = nickname;\r\n        chat.date = Moment(new Date()).format('DD/MM/YYYY HH:mm:ss');\r\n        chat.type = 'message';\r\n\r\n        if(image) {\r\n            \r\n            let timeStampInMs = window.performance && window.performance.now && window.performance.timing && window.performance.timing.navigationStart ? window.performance.now() + window.performance.timing.navigationStart : Date.now();\r\n           \r\n            storage.ref(`/images/${timeStampInMs}${image.name}`).put(image)\r\n                  .then(()=>{\r\n                    storage.ref(`/images/${timeStampInMs}${image.name}`).getDownloadURL().then((imageURL)=>{\r\n                      uploadImage(imageURL)\r\n                      \r\n                    });\r\n                  });\r\n                 \r\n        }else{\r\n            const newMessage = db.ref('chats/').push();\r\n            newMessage.set(chat);\r\n            setNewchat({ roomname: '', nickname: '', message: '', date: '', type: '', imageURL:'' });\r\n        }\r\n\r\n\r\n        \r\n    };\r\n\r\n    const uploadImage = (imageURL) => {\r\n        const chat = JSON.parse(JSON.stringify(newchat));\r\n        chat.roomname = roomname;\r\n        chat.nickname = nickname;\r\n        chat.date = Moment(new Date()).format('DD/MM/YYYY HH:mm:ss');\r\n        chat.type = 'image';\r\n        chat.imageURL = imageURL;\r\n        const newMessage = db.ref('chats/').push();\r\n        newMessage.set(chat);\r\n        setImage('');\r\n        // setNewchat({...newchat, message: ''})\r\n        \r\n    }\r\n\r\n    const onChange = (e) => {\r\n        e.persist();\r\n        setNewchat({...newchat, [e.target.name]: e.target.value});\r\n    }\r\n\r\n    const exitChat = (e) => {\r\n        const chat = { roomname: '', nickname: '', message: '', date: '', type: '' };\r\n        chat.roomname = roomname;\r\n        chat.nickname = nickname;\r\n      //  chat.date = Moment(new Date()).format('DD/MM/YYYY HH:mm:ss');\r\n       // chat.message = `${nickname} leave the room`;\r\n        chat.type = 'exit';\r\n        const newMessage = db.ref('chats/').push();\r\n        newMessage.set(chat);\r\n    \r\n        db.ref('roomusers/').orderByChild('roomname').equalTo(roomname).once('value', (resp) => {\r\n          let roomuser = [];\r\n          roomuser = snapshotToArray(resp);\r\n          const user = roomuser.find(x => x.nickname === nickname);\r\n          if (user !== undefined) {\r\n            const userRef = db.ref('roomusers/' + user.key);\r\n            userRef.update({status: 'offline'});\r\n          }\r\n        });\r\n    \r\n        history.goBack();\r\n    }\r\n\r\n  \r\n    const handleImageChange = (file) => {\r\n        setImage(file)\r\n\r\n        if(newchat.imageURL){\r\n            newchat.imageURL = '';\r\n            setNewchat(newchat);\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"Container\">\r\n            <Container>\r\n                <Row>\r\n                    <Col xs=\"4\">\r\n                        <div>\r\n                            <Card className=\"UsersCard\">\r\n                                <CardBody>\r\n                                    <CardSubtitle>\r\n                                        <Button variant=\"primary\" type=\"button\" onClick={() => { exitChat() }}>\r\n                                            Exit Chat\r\n                                        </Button>\r\n                                    </CardSubtitle>\r\n                                </CardBody>\r\n                            </Card>\r\n                            {users.map((item, idx) => (\r\n                                <Card key={idx} className=\"UsersCard\">\r\n                                    <CardBody>\r\n                                        <CardSubtitle>{item.nickname}</CardSubtitle>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            ))}\r\n                        </div>\r\n                    </Col>\r\n                    <Col xs=\"8\">\r\n                        <ScrollToBottom className=\"ChatContent\">\r\n                            {chats.map((item, idx) => (\r\n                                <div key={idx} className=\"MessageBox\">\r\n                                    {item.type ==='join'||item.type === 'exit'?\r\n                                        <div className=\"ChatStatus\">\r\n                                            <span className=\"ChatDate\">{item.date}</span>\r\n                                            <span className=\"ChatContentCenter\">{item.message}</span>\r\n                                        </div>:\r\n                                        <div className=\"ChatMessage\">\r\n                                            <div className={`${item.nickname === nickname? \"RightBubble\":\"LeftBubble\"}`}>\r\n                                                {item.nickname === nickname ? \r\n                                                    <span className=\"MsgName\">Me</span>:<span className=\"MsgName\">{item.nickname}</span>\r\n                                                }\r\n                                                <span className=\"MsgDate\"> at {item.date}</span>\r\n                                                    {item.type  === 'image' ?\r\n                                                    (<div className='image-container'> <img src = {item.imageURL} alt= 'image' /></div>) \r\n                                                    : <p>{item.message}</p>}\r\n                                           \r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            ))}\r\n                        </ScrollToBottom>\r\n                        <footer className=\"StickyFooter\">\r\n                            <Form className=\"MessageForm\" onSubmit={submitMessage}>\r\n                                <InputGroup>\r\n                                    <Input type=\"text\" name=\"message\" id=\"message\" placeholder=\"Enter message here\" value={newchat.message} onChange={onChange} />\r\n                                    <Upload \r\n                                        uploadImage = { uploadImage }\r\n                                        setImage = { handleImageChange } />\r\n                                    <InputGroupAddon addonType=\"append\">\r\n                                        <Button variant=\"primary\" type=\"submit\">Send</Button>\r\n                                    </InputGroupAddon>\r\n                                </InputGroup>\r\n                            </Form>\r\n                        </footer>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatRoom;","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  useLocation\r\n} from \"react-router-dom\";\r\nimport Login from './components/Login';\r\nimport RoomList from './components/RoomList';\r\nimport AddRoom from './components/AddRoom';\r\nimport ChatRoom from './components/ChatRoom';\r\n\r\nfunction App() {\r\n  let location = useLocation();\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/roomlist\",\r\n            state: { from: location }\r\n          }}\r\n        />\r\n        <Switch>\r\n          <Route path=\"/login\">\r\n            <Login />\r\n          </Route>\r\n          <SecureRoute path=\"/roomlist\">\r\n            <RoomList />\r\n          </SecureRoute>\r\n          <SecureRoute path=\"/addroom\">\r\n            <AddRoom />\r\n          </SecureRoute>\r\n          <SecureRoute path=\"/chatroom/:room\">\r\n            <ChatRoom />\r\n          </SecureRoute>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nfunction SecureRoute({ children, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        localStorage.getItem('nickname') ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}","\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    \r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      \r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n      \r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n       \r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        \r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n             \r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              \r\n              console.log('Content is cached for offline use.');\r\n\r\n             \r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n \r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n     \r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        \r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n       \r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}